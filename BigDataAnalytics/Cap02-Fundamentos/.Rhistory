class(matriz1)
typeof(matriz1)
# array: 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim = c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
# Data Frame: dados de diferentes tipos
# Resumido: matriz de diversos tipos
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
# Listas: coleções de diferentes objetos
# diferentes tipos de dados
lista1 <- list(a=matriz1, v=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
# Funções também são vista como objetos pelo R
func1 <- function(x){
var1 <- x * x
return (var1)
}
func1(5)
class(func1)
# removendo objetos
objects()
rm(array1, lista1, func1)
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap02-Fundamentos")
getwd()
# Vetor de string
vetor_caracter = c("Data", "Science", "Academy")
vetor_caracter
vetor_numerico = c(1.9, 45.3, 300.5)
vetor_numerico
vetor_complexo = c(5.3 + 2i, 66 +  0i, 3.8 + 4i)
vetor_complexo
vetor_logico = c(TRUE, FALSE, FALSE, TRUE)
vetor_logico
vetor_inteiro = c(1, 2, 3, 4)
vetor_inteiro
q = c(1.2, 3, 4L)
q
q = c(1.2, 3, 4L, 2 + 0i)
q
# utilizando seq
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
# utilizando rep()
vetor2 = rep(1:4)
vetor2
is.vector(vetor2)
# indexação de vetor
a <- seq(1:5)
a
a[1]
a[6]
b <- vetor_caracter
b
b[1]
b[2]
b[3]
b[4]
# Combinando vetores
v1 = c(2, 3, 5)
v2 = c('aa', 'bb', 'cc', 'dd', 'ee')
c(v1, v2)
r = c(v1, v2)
length(r)
mode(r)
class(r)
typeof(r)
# operação com vetores
x = c(1, 3, 5, 7)
y = c(2, 4, 6, 8)
x + y
x - y
x * y
x / y
x %% y
6/7
x %% y
# somando vetores com tamanhos diferentes de elementos
alfa = c(10, 20, 30)
beta = seq(1:9)
alfa + beta
# Vetor Nomeado
v = c("Nelson", "Mandela")
v
mode(v)
typeof(v)
names(v) = c("Nome", "Sobrenome")
v
v["Nome"]
mode(v)
typeof(v)
rm(v)
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap02-Fundamentos")
getwd()
# Número de linhas
matrix(seq(1,6), nr=2)
matrix(seq(1,6), nr=3)
matrix(seq(1,6), nr=6)
matrix(seq(1,6), nr=4)
# Número de colunas
matrix(seq(1, 6), ncol = 2)
# help
?matrix
# matrizess número de elementos devem ser múltiplos do número de linhas
matrix(seq(1,5), nr = 2)
# Criando matrizes a partir de vetores e preencher a partir das linhas
meus_dados = c(1:10)
matrix(data=meus_dados, nrow = 5, ncol = 2, byrow = T)
matrix(data=meus_dados, nrow = 5, ncol = 2)
# Fatiando a Matriz
mat <- matrix(c(2, 3, 4, 5), nr = 2)
mat
mat[1, 2]
mat[2, 2]
mat[1, 3]
mat[,2]
mat[2,]
# criando matriz diagonal -> apenas a diagonal não é zerada
matriz = 1:3
matriz
diag(matriz)
# extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
vetor
diag(vetor)
matriz
diag(vetor)
# Transposta da matriz -> Trnansformar linhas em colunas
W <- matrix(c(2,4,8,12), nr=2, nc=2)
W
t(W)
U = t(W)
U
U - W
# obtendo uma matriz inversa -> aquela q multiplicada pela matriz
# obtén-se uma matriz identidade -> Matriz diagonal = 1
W
solve(W)
W * solve(W)
W %*% solve(W)
W * diag(1,1)
# Multiplicação de Matrizes
mat1 <- matrix(c(2,3,4,5), nr=2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# Multiplicar matriz por vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
y
x * y
x * matrix(c(2,3,4,5), nc = 2)
w = matrix(c(2,3,4,5), nc = 2)
w
x * w
x
y <- matrix(c(2,3,4,5), nr = 2)
y
x * y
# Nomeando a Matriz
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Neturno'), nr = 2)
mat3
dimnames(mat3) = list(c('_l1_', 'l2'), c('c1','_c2_'))
mat3
mat3['_l1_', '_c2_']
# Identificando linhas e colunas no momento da criação da Matriz
matrix(seq(1:4), nr = 2, dimnames = list(c('L1','L2'), c('C1','C2')))
# Combinando Matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4, mat5)
rbind(mat4, mat5)
# Desconstruindo Matriz
c(mat4)
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap02-Fundamentos")
getwd()
# Lista de strings
lista_caracter1 = list('A','B','C')
lista_caracter1
lista_caracter2 = list(c('A','A'), 'B', 'C')
lista_caracter2
lista_caracter2[1][1]
lista_caracter3 = list(matrix(c("A","A","A","A") , nr =2), 'B', 'C')
lista_caracter3
lista_caracter1[1]
lista_caracter3[1]
lista_caracter3[1][1][2]
lista_caracter3[1][[1][2]]
lista_caracter3[1]
lista_caracter3[1][[1,2]]
lista_caracter2[1][1]
lista_caracter2[1]
lista_caracter3[[1]
]
lista_caracter3[[1]][1][2]
# lista de números inteiros
lista_inteiros = list(2,3,4)
lista_inteiros
lista_caracter3[[1]][1]
lista_caracter3[[1]]
lista_inteiros[[2]]
lista_inteiros[[2]][1]
lista_inteiros[[2]][1][1]
lista_caracter3[1][1][2]
# lista de números inteiros
lista_inteiros = list(2,3,4)
lista_inteiros
# lista de floats
lista_numerico = list(1.9, 45.3, 300.5)
lista_numerico
# lista números complexos
lista_complexos = list(5+5i, 2.4 + 8i)
lista_complexos
# listas compostas
lista_composta1 = list("A", 3, T)
lista_composta1
lista1 <- list(1:10, c("Zico", "Ronaldo", "Garrincha"), rnorm(10))
lista1
?rnorm
# Slicing da lista
lista1[1]
lista1[2]
lista1[[2]][[1]]
lista1[[2]][[1]] = 'Monica'
lista1
# para nomear os elementos - Lista Nomeada
names(lista1) <- c('inteiros','caracteres','numericos')
lista1
vec_num <- 1.4
vec_char <- c('a','b','c', 'd')
lista2 <- list(Numeros=vec_num, Letras=vec_char)
lista2
# Nomear os elementos diretamente
lista2 <- list('elem1' = 3.5, elem2 = c(7,2,3,5))
lista2
# trabalhando com elementos diretamente
lista1
lista1$inteiros
length(lista1$inteiros)
lista1$caracteres
# verificar o comprimento da listta
length(lista1)
# extrair um elemento específico
lista1$inteiros[3]
# Modo dos elementos
mode(lista1$inteiros)
mode(lista1$caracteres)
# Combinando 2 listas
lista3 <- c(lista1, lista2)
lista3
# Transformando vetor em lista
v = c(1:3)
v
l = list(v)
l
l1 = as.list(v)
l1
# unindo 2 elementos em 1 lista
mat = matrix(1:4, nrow = 2)
mat
vec = (1:9)
vec
lst <- list(mat, vec)
lst
# String - aspas simples ou duplas
texto <- 'isto é uma string'
texto
x = as.character(3.14)
x
class(x)
# Concatenar
nome = "Nelson"; sobrenome = "Mandela"
paste(nome, sobrenome)
nome; sobrenome
cat(nome, sobrenome)
# Formatando a saída
sprintf('A %s é nota %d', 'DSA', 10)
# Extraindo parte da string
texto
substring(texto, 12, 17)
substr(texto, stop = 3, start = 2)
?substring
# contando o número de caracteres
nchar(texto)
# Alterando Captalização
h <- "Histogramas e Elementos de Dados"
tolower(h)
toupper(h)
# usando stringer
library(stringr)
strsplit(h, NULL)
strsplit(h, ' ')
?strsplit
# Trabalhando com strings
string1 <- c('Esta é a primeira parte da minha string e será a primeira parte do meu vetor',
'aqui minha string continua mas será a segunda parte do meu vetor')
string1
string2 <- c("Precisamos testar outras strings - @$$??!!!&&",
"Análise de dados em R")
string2
# adicionar 2 strings
str_c(string1, string2)
str_c(c(string1, string2), sep=" ")
# Podemos contar qts vezes aparece o carcater s
str_count(string2, 's')
?str_count
# Podemos contar qts vezes aparece o carcater s
str_count(string2, 's')
# Localiza a primeira e a última posição em que o caracter aparece
str_locate_all(string2, 's')
# Substitui a primeira ocorrência de um caracter
str_replace(string2, '\\s', '')
# Substitui todas as ocorrências de um caracter
str_replace_all(string2, '\\s', '')
# Detectando padrões nas strings
string1 <- '17 jan 2001'
string2 <- '1 jan 2001'
padrao <- 'jan 20'
grepl(pattern = padrao, x= string1)
padrao <- 'jan20'
grepl(pattern = padrao, x= string1)
# Criando o dataframe
df <- data.frame()
class(df)
df
# criando vetores vazios
nomes1 <- character(10)
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap02-Fundamentos")
getwd()
# Criando o dataframe
df <- data.frame()
class(df)
df
# criando vetores vazios
nomes1 <- character(10)
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
df <- data.frame(c(nomes, idades, itens, codigos))
df
df
# criando vetores
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
nome = c("Bruno", "Tiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.54, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando dataframe  de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
length(pesquisa)
# adicionando um novo vetor ao dataframe
olhos = c('verde', 'azul', 'azul', 'castanho', 'castanho')
pesq = cbind(pesquisa, olhos)
pesq
# informação sobre o DF
str(pesq)
dim(pesq)
length(pesq)
# obtendo vetor do dataframe
pesq$pais
pesq$nome
# extraindo um único valor
pesq$pais[3]
pesq$pais[1:3]
pesq$pais[1,3]
pesq$pais[1;3]
pesq[1:3]
pesq[2]
pesq[[2]]
pesq[3, 2]
# Número de linhas e colunas
nrow(pesq)
ncol(pesq)
# Primeiros elementos de data frame
head(pesq)
head(mtcars)
nrow(mtcars)
ncol(mtcars)
View(pesq)
pesq[1,4]
pesq[4,1]
pesq[4]
pesq[,4]
pesq[4,]
# Ultimos elementos
tail(pesq)
tail(mtcars)
# DF built-in
?mtcars
mtcars
mtcars[1]
View(mtcars)
nrow(mtcars)
ncol(mtcars)
View(pesq)
# Filtros para um subset
pesq[altura < 1.60,]
pesq[altura < 1.61, c('codigo', 'olhos')]
pesq$olhos
pesq$olhos[3]
# DF nomeados
names(pesq) <- c("Pais", "Nome", "Altura", "Codigo", "Olhos")
names(pesq)
pesq
colnames(pesq)
names(pesq)
colnames(pesq) <- c('var1', 'var2', 'var3', 'var4', 'var5')
pesq
rownames(pesq)
rownames(pesq) <- c('obs1', 'obs2', 'obs3', 'obs4', 'obs5')
pesq
# carregando um arquivo csv
?read.csv
pacientes <- data.frame(read.csv(file='pacientes.csv',header = T,sep = ','))
View(pacientes)
head(pacientes)
summary(pacientes)
# Visualizando as variáveis
pacientes$Diabete
pacientes$Status
# Histograma
hist(pacientes$Idade)
pacientes
# Combinando DataFrames
dataset_final = merge(pesq, pacientes)
dataset_final
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap02-Fundamentos")
getwd()
# Exercício 1 - Crie um vetor com 30 números inteiros
vetor = seq(1:30)
vetor
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas
# preenchida com números inteiros
matriz = matrix(c(1:16), nrow = 4, ncol = 4, byrow = T)
matriz
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lista = list(vetor, matriz)
lista
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo
# para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
df = data.frame(read.table(file = 'http://data.princeton.edu/wws509/datasets/effort.dat', header = T))
df
df
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado
# com os seguintes labels:
# c("config", "esfc", "chang")
names(df) = c("config", "esfc", "chang")
head(df)
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões
# existem no dataframe iris e imprima um resumo do dataset
iris
nrow(iris)
ncol(iris)
dim(iris)
summary(iris)
str(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do
# dataframe iris
View(iris[T, c('Sepal.Length', 'Sepal.Width')])
plot(iris[, c(1,2)])
plot(iris$Sepal.Length, iris$Sepal.Width)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto
# de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
df1 = iris[iris$Sepal.Length > 7,]
df1
nrow(df1)
ncol(df1)
?subset
df2 = subset(iris, iris$Sepal.Length > 7)
View(df2)
nrow(df2)
ncol(df2)
dim(df2)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris
novo_iris <- iris
# e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
library(dplyr)
# Dica 2: Consulte o help para aprender como usar a função slice()
help(slice)
df3 = slice(novo_iris,1:15)
df3
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item
# anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
filter(novo_iris, novo_iris$Sepal.Length > 7)
