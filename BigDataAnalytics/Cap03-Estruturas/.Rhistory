else if(x == 7)
{"Este número é o 7"}
else
"Este número é maaior do que 7"
x = 7
if (x < 7)
{  "Este número é menor do que 7"}
else if(x == 7)
{"Este número é o 7"}
else {
"Este número é maaior do que 7"
}
x = 7
if (x < 7){
"Este número é menor do que 7"
}
else if(x == 7) {
"Este número é o 7"
}
else {
"Este número é maaior do que 7"
}
if (x < 7){
"Este número é menor do que 7"
}
else if(x == 7) {
"Este número é o 7"
}
x = 7
if (x < 7) {
"Este número é menor que 7"
} else if(x == 7) {
"Este é o número 7"
}else{
"Este número não é menor que 7"
}
x = 7
if (x < 7) {
"Este número é menor que 7"
} else if(x == 7) {
"Este é o número 7"
}else{
"Este número não é menor que 7"
}
x = 7
if (x < 7){
"Este número é menor do que 7"
} else if(x == 7) {
"Este número é o 7"
} else{
"Este número é maaior do que 7"
}
x = 7
if (x < 7){
"Este número é menor do que 7"
} else if(x == 7) {
"Este número é o 7"
} else {
"Este número é maaior do que 7"
}
# Comandos aninhados
x = 7
if (x < 7){
"Este número é menor do que 7"
} else if(x == 7) {
"Este número é o 7"
}else {
"Este número é maaior do que 7"
}
x = 7
if (x < 7){
"Este número é menor do que 7"
}
else if(x == 7) {
"Este número é o 7"
}
else {
"Este número é maaior do que 7"
}
x = 7
if (x < 7){
"Este número é menor do que 7"
}else if(x == 7) {
"Este número é o 7"
}else {
"Este número é maaior do que 7"
}
x = 7
if (x < 7){
"Este número é menor do que 7"
}
else if(x == 7) {
"Este número é o 7"
}else {
"Este número é maaior do que 7"
}
x = 7
if (x < 7) {
"Este número é menor que 7"
}
else if(x == 7) {
"Este é o número 7"
}else{
"Este número não é menor que 7"
}
x = 7
if (x < 7) {
"Este número é menor que 7"
} else if(x == 7) {
"Este é o número 7"
}else{
"Este número não é menor que 7"
}
if x == 30
if x == 30
print(30)
else
print(x)
if x == 30{
print(30)
}else{
print(x)
}
if (x == 30) {
print(30)
}else{
print(x)
}
if x == 30 {
print(30)
}else{
print(x)
}
if (x == 30) {
print(30)
}else{
print(x)
}
hoje <- Sys.Date()
hoje
class(hoje)
Sys.time()
Sys.timezone()
? strptime
# Formatando as saída - as.Date()
as.Date("2018-06-28")
hoje <- Sys.Date()
hoje
class(hoje)
Sys.time()
Sys.timezone()
? strptime
# Formatando as saída - as.Date()
as.Date("2018-06-28")
as.Date("Jun-28-18", format="%b-%d-%y")
list(m)
# Lista de Exercícios - Capítulo 3
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap03-Estruturas")
getwd()
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
list.files()
# Exercício 2 - Crie um dataframe a partir de 3 vetores: um de caracteres, um lógico e um de números
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0)
)
# Exercício 3 - Considere o vetor abaixo.
# Criando um Vetor
vec1 <-c(12, 3, 4, 19, 34)
vec1
# Crie um loop que verifique se há números maiores que 10 e imprima o número e uma mensagem no console.
for (v in vec1){
if (v > 10){
print(sprintf("%d é maior do que 10", v))
}
}
# Exercício 4 - Considere a lista abaixo. Crie um loop que imprima no console cada elemento da lista
lst2 <- list(2, 3, 5, 7, 11, 13)
lst2
for (l in lst2){
print(l)
}
for (v in unlist(lst2)) {
print(v)
}
# Exercício 5 - Considere as duas matrizes abaixo.
# Faça uma multiplicação element-wise e multiplicação normal entre as materizes
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
# Multiplicação element-wise
mat1 * mat2
# Multiplicação de matrizes
mat1 %*% mat2
# Exercício 6 - Crie um vetor, matriz, lista e dataframe e faça a nomeação de cada um dos objetos
v = c(1, 2, 3)
m = matrix(v, nrow = 2)
list(m)
m
m = matrix(v, nrow = 2, dimnames = list("R", "C"))
m = matrix(c(1, 2, 3, 4), nrow = 2, dimnames = list("R", "C"))
m = matrix(c(1, 2, 3, 4), nrow = 2, dimnames = list("R1", "R2", "C1", "C2"))
m = matrix(c(1, 2, 3, 4), nrow = 2, dimnames = list("R1" "C2"))
m = matrix(v, nrow = 2, dimnames = list(c("R1","R2"), c("L1", "L2")))
m
l = list(vetor = v, matrix = m)
l
df = data.frame(list = l, vetor = v, matrix = m)
df = data.frame(lista = l, vetor = v, matriz = m)
df
df = data.frame(lista = l, )
df = data.frame(vetor = v, matriz = m)
df = data.frame(lista = unlist(l), vetor = v)
unlist(l)
df = data.frame(unlist(l), vetor = v)
df = data.frame(unlist(l))
df
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0)
)
df
?data.frame
df <- data.frame(x = c(TRUE, FALSE, NA, NA), y = c(12, 34, 56, 78))
row.names(df) <- 1 : 4
attr(df, "row.names")
deparse(df)
df
row.nanes <- c("l1", "l2", "l3, "l4")
row.nanes(df) <- c("l1", "l2", "l3, "l4")
row.names(df) <- c("l1", "l2", "l3, "l4")
row.names(df) <- 6 : 10
row.names(df) <- 6 : 9
df
row.names(df) <- c(11, 22, 33, 44)
df
row.names(df) <- c("11", "22", "33", "44")
row.names(df) <- c("L1", "L2", "L3", "L4")
df
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0),
row.names = c("L1", "L2", "L3", "L4"))
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0),
row.names = c("L1", "L2", "L3"))
df
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0),
row.names = c("L1", "L2", "L3"))
a = sample(90, 50)
a
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
mat2
mat2[[6]]
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
mat2
a = sample(90, 50)
for (i in a){
mat2[[i]] = NA
}
mat2
a
sort(a)
# -----------
mat2 <- matrix(1:90, 10)
mat2
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap03-Estruturas")
apply(mat, x, NA)
apply(mat, x, function { NA })
apply(mat, x, function() { NA })
apply(mat2, x, function() { NA })
apply(mat2, a, function() { NA })
?apply
# by
?by
# mapply
?mapply
mapply(rep, 1:4, 4:1)
?apply
# Exercício 8 - Para a matriz abaixo, calcule a soma por linha e por coluna
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
lapply(list, 1, sum)
apply(list, 1, sum)
apply(mat1, 1, sum)
apply(mat1, 2, sum)
# Exercício 9 - Para o vetor abaixo, ordene os valores em ordem crescente
a <- c(100, 10, 10000, 1000)
a
sort(a)
for (m in mat1){
if (m > 15){
print(m)
}
}
# Lista de Exercícios - Capítulo 3
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap03-Estruturas")
getwd()
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
list.files()
# Exercício 2 - Crie um dataframe a partir de 3 vetores: um de caracteres, um lógico e um de números
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0)
)
# Exercício 3 - Considere o vetor abaixo.
# Criando um Vetor
vec1 <-c(12, 3, 4, 19, 34)
vec1
# Crie um loop que verifique se há números maiores que 10 e imprima o número e uma mensagem no console.
for (v in vec1){
if (v > 10){
print(sprintf("%d é maior do que 10", v))
}
}
# Exercício 4 - Considere a lista abaixo. Crie um loop que imprima no console cada elemento da lista
lst2 <- list(2, 3, 5, 7, 11, 13)
lst2
for (l in lst2){
print(l)
}
for (v in unlist(lst2)) {
print(v)
}
# Exercício 5 - Considere as duas matrizes abaixo.
# Faça uma multiplicação element-wise e multiplicação normal entre as materizes
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
# Multiplicação element-wise
mat1 * mat2
# Multiplicação de matrizes
mat1 %*% mat2
# Exercício 6 - Crie um vetor, matriz, lista e dataframe e faça a nomeação de cada um dos objetos
v = c(1, 2, 3)
m = matrix(v, nrow = 2, dimnames = list(c("R1","R2"), c("C1", "C2")))
l = list(vetor = v, matrix = m)
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0),
row.names = c("L1", "L2", "L3")
)
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
mat2
a = sample(90, 50)
a
for (i in a){
mat2[[i]] = NA
}
mat2
# Exercício 8 - Para a matriz abaixo, calcule a soma por linha e por coluna
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
apply(list, 1, sum)
for l in ls() { l }
for (l in ls()) { l }
for (l in ls()) { print(l) }
for (l in ls()) { detach(l) }
for (l in ls()) { detach(packafe:l) }
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap03-Estruturas")
getwd()
# Busca os pacotes carregados
search()
# Instala e carrega os pacotes
# install.packages(c("ggvis", "tm", "dplyr"))
library(ggvis)
library(tm)
require(dplyr)
search()
?require
detach(package:dplyr)
search()
#lista o conteúdo dos pacotes
?ls
ls(pos = "package:tm")
ls(getNamespace("tm"), all.names = T)
# Lista as funções de um pacote
lsf.str("package:tm")
lsf.str("package:ggplot2")
library("ggplot2")
lsf.str("package:ggplot2")
# R possui um conjunto de pacotes pré-instalado
library(MASS)
data()
?lynx
head(lynx)
head(iris)
tail(lynx)
summary(lynx)
plot(lynx)
hist(lynx)
head(iris)
iris$Sepal.Length
sum(Sepal.Length)
?attach
attach(iris)
sum(Sepal.Length)
# Lista de Exercícios - Capítulo 3
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Projetos/Python/git/R/DSA/BigDataAnalytics/Cap03-Estruturas")
getwd()
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
list.files()
# Exercício 2 - Crie um dataframe a partir de 3 vetores: um de caracteres, um lógico e um de números
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0)
)
# Exercício 3 - Considere o vetor abaixo.
# Criando um Vetor
vec1 <-c(12, 3, 4, 19, 34)
vec1
# Crie um loop que verifique se há números maiores que 10 e imprima o número e uma mensagem no console.
for (v in vec1){
if (v > 10){
print(sprintf("%d é maior do que 10", v))
}
}
# Exercício 4 - Considere a lista abaixo. Crie um loop que imprima no console cada elemento da lista
lst2 <- list(2, 3, 5, 7, 11, 13)
lst2
for (l in lst2){
print(l)
}
for (v in unlist(lst2)) {
print(v)
}
# Exercício 5 - Considere as duas matrizes abaixo.
# Faça uma multiplicação element-wise e multiplicação normal entre as materizes
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
# Multiplicação element-wise
mat1 * mat2
# Multiplicação de matrizes
mat1 %*% mat2
# Exercício 6 - Crie um vetor, matriz, lista e dataframe e faça a nomeação de cada um dos objetos
v = c(1, 2, 3)
m = matrix(v, nrow = 2, dimnames = list(c("R1","R2"), c("C1", "C2")))
l = list(vetor = v, matrix = m)
df = data.frame(Coluna1 = c("a", "b", "c"),
Coluna2 = c(T, F, F),
Coluna3 = c(1, 0, 0),
row.names = c("L1", "L2", "L3")
)
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
mat2
a = sample(90, 50)
a
for (i in a){
mat2[[i]] = NA
}
mat2
# Exercício 8 - Para a matriz abaixo, calcule a soma por linha e por coluna
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
apply(mat1, 1, sum)
apply(mat1, 2, sum)
# Exercício 9 - Para o vetor abaixo, ordene os valores em ordem crescente
a <- c(100, 10, 10000, 1000)
a
sort(a)
# # Exercício 10 - Imprima no console todos os elementos da matriz abaixo que forem maiores que 15
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
for (m in mat1){
if (m > 15){
print(m)
}
}
mat1
?by
?do.call
?by
?apply
?rbind
lapply(mat1, sum)
mat1
sapply(mat1, sum)
mapply(sum, mat1)
df
